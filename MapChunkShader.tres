[gd_resource type="Shader" format=3 uid="uid://co7puv05g5tp4"]

[resource]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx,depth_prepass_alpha;

uniform int tile_type_count;
uniform sampler2D noise_texture: filter_nearest;
uniform sampler2DArray textures_tiles: source_color,filter_nearest;
varying vec3 uv1_triplanar_pos;
varying vec3 uv1_power_normal;


void vertex() {
	uv1_triplanar_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0f)).xyz;
	// Normalisation des coordonnées triplanar pour des tuiles de 32 pixels
    uv1_triplanar_pos /= vec3(8192.0, 1.0, 8192.0);
}

vec4 triplanar_texture(sampler2D p_sampler,vec3 p_triplanar_pos) {
	vec4 samp = texture(p_sampler, p_triplanar_pos.xz );
	return samp;
}

float get_noise_value_by_coord(vec3 coord) {
	return floor(triplanar_texture(noise_texture, coord ).r * float(tile_type_count));
}


vec4 debug(vec2 tile, vec4 texture_color) {
	vec2 global_tile_pixel = tile * 32.;
	vec2 normalized_tile_pixel = mod(global_tile_pixel, 32.) / 32.;
	float border = 0.01 * get_noise_value_by_coord(vec3(tile.x+normalized_tile_pixel.x, 0.,tile.y+ normalized_tile_pixel.y)/32.);
	float from_left = float(normalized_tile_pixel.x-0.1 < border);
	float from_right = float(normalized_tile_pixel.x+0.1 > 1. - border);
	float from_up = float(normalized_tile_pixel.y-0.1 < border);
	float from_down = float(normalized_tile_pixel.y+0.1 > 1. - border);
	float total_neighbor = from_left + from_right + from_up + from_down;
	
	if (total_neighbor > 0.) {
		vec3 neighbor_coord = vec3(uv1_triplanar_pos.x+(from_left+from_right), 0., uv1_triplanar_pos.y+(from_up+from_down));
		float current_noise_value = get_noise_value_by_coord(neighbor_coord);
		texture_color.rgb = texture(textures_tiles, vec3(global_tile_pixel, current_noise_value)).rgb;
	}
	return texture_color;
}

void fragment() {
    vec2 tile = UV * 32.;
    
	float current_noise_value = get_noise_value_by_coord(uv1_triplanar_pos);
    // Obtenez la texture correspondant à la valeur du tableau chunk_tiles
    vec4 texture_color = texture(textures_tiles, vec3(tile, current_noise_value));
	texture_color = debug(tile, texture_color);
	ALBEDO = texture_color.rgb;
	ALPHA = texture_color.a;
}
"
