[gd_resource type="Shader" format=3 uid="uid://co7puv05g5tp4"]

[resource]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx,depth_prepass_alpha;

uniform sampler2D noise_texture: filter_nearest;
uniform sampler2DArray textures_tiles: filter_nearest;
varying vec3 uv1_triplanar_pos;
varying vec3 uv1_power_normal;

void vertex() {
	uv1_triplanar_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0f)).xyz;
	uv1_triplanar_pos *= vec3(0.01,-1., 0.01);
}

vec4 triplanar_texture(sampler2D p_sampler,vec3 p_triplanar_pos) {
	vec4 samp = texture(p_sampler, p_triplanar_pos.xz );
	return samp;
}

void fragment() {
    // Coordonnées de texture du pixel actuel
    vec2 tile = UV * 32.;
    
	float noise_index = floor(triplanar_texture(noise_texture, uv1_triplanar_pos / 64.).r * 4.);
    
    // Obtenez la texture correspondant à la valeur du tableau chunk_tiles
    vec4 texture_color = texture(textures_tiles, vec3(tile, noise_index));
	
	ALBEDO = texture_color.rgb;
}
"
